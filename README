LoremPicsum, v0.0.1

Decision, comments, TODOs:
#1 I choose minSdk 23; I think it's a reasonable choice for EU-targeted Apps.

#2 Due to tight schedule I stick to the architecture I use everyday:
- RxJava2 (rather than LiveData/coroutines)
- dagger2
- MVP (rather than MVVM)
- multiple Activities (rather than Navigation AAC)

#3 I use a SharedPref-based Repository to store the list of fetched images (json)
This way we can live without AAC ViewModel quite fine, at least for this requirements.

#4 I have provided simple UTs for MainPresenter

#5 (in the last moment) I have refacotred towards a full-injectable Presenter. I deliberately did not
use any AndroidInjection, as I find it to be too complex (I use it in my current project, would not go this way again).
Some improvement would be to use @IntoMap to avoid a little of the boilerplate. However, I find the solution I have provided
to be the most readable.
Big thing is that Presenter receives both App-scoped and Activity-scoped objects in the constructor

#6 I'm no designer, as you might have seen

#7 My tests show that my Repo is not really working. Ok, fixed!

After-4h-improvements (you may ignore that, time was over. But only 15 minutes ;) :
#1 I have added progress indicator, before the initial fetch of pics-list. Totally forgot about that in the first place
#2 I have added initial code for the end-of-scroll handling. It does stupid thing: loads the same list anew.
But it's very close to a fully-working solution

Sum-up:
- I probably prefer to do some initial arch/package structure rather than implement the feature ASAP.
- I can easily test stuff that shall be tested